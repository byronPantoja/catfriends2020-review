{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","position","className","class","alt","src","CardList","people","cardComponent","map","_name","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","margin","children","App","this","onRequestPeople","searchField","onSearchChange","isPending","filteredCatpeople","filter","catPeople","toLowerCase","includes","Component","onmousemove","e","color","valX","clientX","document","body","clientWidth","valY","clientY","clientHeight","console","log","documentElement","setProperty","connect","state","searchPeople","requestPeople","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","initialStateCats","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1b9d00ee.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, position }) => {\n\treturn (\n\t\t<div className='tc bg-washed-blue dib br3 pa3 ma2 grow bw2 shadow-hover '>\n\t\t\t<img\n\t\t\t\tclass='br-100 dib ba bg-white b--dashed pa2'\n\t\t\t\talt='cat-caricatures'\n\t\t\t\tsrc={`https://robohash.org/set_set4/${name}/?size=200x200`}\n\t\t\t/>\n\t\t\t<div className='courier'>\n\t\t\t\t<h2 class='f6'>{name}</h2>\n\t\t\t\t<p class='f7'>{email}</p>\n\t\t\t\t<p>{position}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ people }) => {\n  // if (true) {\n  //   throw new Error(\"The cat's outta the bag!\")\n  // } /* Used this to try out the ErrorBoundary component */\n  const cardComponent = people.map((_name, i) => \n      <Card \n    name={people[i].name} \n    email={people[i].email} \n    position={people[i].position} \n  />)\n  return ( \n      <div className=\"tc\">  \n        { cardComponent }\n      </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className='tc pb4'>\n\t\t\t<input\n\t\t\t\tclassName='pa3 ba b--washed-blue bg-washed-blue shadow-1'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='Search cat people'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n};\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n    return ( <\n        div className = \"mw9-ns\"\n        style = {\n            {\n                overflow: \"scroll\",\n                height: \"500px\",\n                margin: \"0 auto\",\n            }\n        } >\n        { props.children } <\n        /div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestPeople } from '../actions';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport '../index';\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchPeople.searchField,\n\t\tpeople: state.requestPeople.people,\n\t\tisPending: state.requestPeople.isPending,\n\t\terror: state.requestPeople.error,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestPeople: () => dispatch(requestPeople()),\n\t};\n};\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestPeople();\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, people, isPending } = this.props;\n\t\tconst filteredCatpeople = people.filter((catPeople) => {\n\t\t\treturn catPeople.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\t\treturn isPending ? (\n\t\t\t<h1>Loading</h1>\n\t\t) : (\n\t\t\t<div>\n\t\t\t\t<h1 className='f1'>C A T F R I E N D S</h1>\n\t\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList people={filteredCatpeople} />\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n// --CSS background changes-- // from Una Kravets talk on Coding Tech\nconst changeBg = (color) => {\n\tdocument.documentElement.style.setProperty('--background', color);\n};\n\nonmousemove = (e) => {\n\tlet valX = (e.clientX / document.body.clientWidth) * 255;\n\tlet valY = (e.clientY / document.body.clientHeight) * 255;\n\tconsole.log(valX, valY);\n\tchangeBg(`rgb(${valX}, ${valY}, 90)`);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_PEOPLE_PENDING,\n  REQUEST_PEOPLE_SUCCESS,\n  REQUEST_PEOPLE_FAILED,\n} from './constants'\n\nexport const setSearchField = (text) => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text \n  }\n}\n    // NOTES --'payload' is used in redux to send whatver data is needed to the reducer.\n\nexport const requestPeople = () => (dispatch) => {\n  dispatch({ type: REQUEST_PEOPLE_PENDING})\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response=> response.json())\n  .then(data => dispatch({type:REQUEST_PEOPLE_SUCCESS, payload: data}))\n  .catch(error => dispatch ({ type: REQUEST_PEOPLE_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const  REQUEST_PEOPLE_PENDING = 'REQUEST_PEOPLE_PENDING';\nexport const  REQUEST_PEOPLE_SUCCESS = 'REQUEST_PEOPLE_SUCCESS';\nexport const  REQUEST_PEOPLE_FAILED = 'REQUEST_PEOPLE_FAILED';\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_PEOPLE_PENDING,\n  REQUEST_PEOPLE_SUCCESS,\n  REQUEST_PEOPLE_FAILED,\n} from './constants'\n\nconst initialState = {\n  searchField: ''\n}\n\nexport const searchPeople = (state=initialState, action={}) =>{\n    switch(action.type) {\n      case CHANGE_SEARCH_FIELD:\n        return ({}, state, {searchField: action.payload})\n      default:\n        return state;\n    }\n} \n\nconst initialStateCats = {\n  isPending: false,\n  people: [],\n  error: '',\n}\n\nexport const requestPeople = (state=initialStateCats, action={}) => {\n  switch(action.type) {\n    case REQUEST_PEOPLE_PENDING:\n      return Object.assign({}, state, { isPending: true})\n    case REQUEST_PEOPLE_SUCCESS:\n        return Object.assign({}, state, { people: action.payload, isPending: false})\n    case REQUEST_PEOPLE_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false})\n    default:\n    return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './containers/App.css';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchPeople, requestPeople } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchPeople, requestPeople });\nconst store = createStore(\n\trootReducer,\n\tapplyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\nserviceWorker.register();\n"],"sourceRoot":""}